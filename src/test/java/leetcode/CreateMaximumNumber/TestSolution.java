package leetcode.CreateMaximumNumber;

import org.junit.Assert;
import org.junit.Test;

/**
 * Created by ymyue on 7/17/16.
 */
public class TestSolution {
    Solution solution = new Solution();

    @Test
    public void test0() {
        Assert.assertArrayEquals(new int[] {6, 7, 6, 0, 4}, solution.maxNumber(new int[] {6, 7}, new int[] {6, 0, 4}, 5));
    }

    @Test
    public void test1() {
        Assert.assertArrayEquals(new int[] {9, 8, 6, 5, 3}, solution.maxNumber(new int[]{3, 4, 6, 5}, new int[]{9, 1, 2, 8, 3}, 5));
    }

    @Test
    public void test3() {
        Assert.assertArrayEquals(new int[]{7, 3, 8, 2, 5, 6, 4, 4, 0, 6, 5, 7, 6, 2, 0}, solution.maxNumber(new int[]{2, 5, 6, 4, 4, 0}, new int[]{7, 3, 8, 0, 6, 5, 7, 6, 2}, 15));
    }

    @Test
    public void test4() {
        Assert.assertArrayEquals(new int[]{9, 9, 9, 9, 9, 9, 9, 7, 8, 7, 6, 1, 7, 2, 7, 5, 5, 1, 5, 2, 5, 7, 1, 0, 4, 3, 8, 7, 3, 8, 5, 3, 8, 3, 4, 0, 2, 3, 8, 2, 7, 1, 2, 3, 8, 7, 6, 7, 1, 1, 3, 9, 0, 5, 2, 8, 2, 8, 7, 5, 0, 8, 0, 7, 2, 8, 5, 6, 5, 9, 5, 1, 5, 2, 6, 2, 4, 9, 9, 7, 6, 5, 7, 9, 2, 8, 8, 3, 5, 9, 5, 1, 8, 8, 4, 6, 6, 3, 8, 4, 6, 6, 1, 3, 4, 1, 6, 7, 0, 8, 0, 3, 3, 1, 8, 2, 2, 4, 5, 7, 3, 7, 7, 4, 3, 7, 3, 0, 7, 3, 0, 9, 7, 6, 0, 3, 0, 3, 1, 5, 1, 4, 5, 2, 7, 6, 2, 4, 2, 9, 5, 5, 9, 8, 4, 2, 3, 6, 1, 9}, solution.maxNumber(new int[]{3, 3, 3, 2, 3, 7, 3, 8, 6, 0, 5, 0, 7, 8, 9, 2, 9, 6, 6, 9, 9, 7, 9, 7, 6, 1, 7, 2, 7, 5, 5,1}, new int[]{5,6,4,9,6,9,2,2,7,5,4,3,0,0,1,7,1,8,1,5,2,5,7,0,4,3,8,7,3,8,5,3,8,3,4,0,2,3,8,2,7,1,2,3,8,7,6,7,1,1,3,9,0,5,2,8,2,8,7,5,0,8,0,7,2,8,5,6,5,9,5,1,5,2,6,2,4,9,9,7,6,5,7,9,2,8,8,3,5,9,5,1,8,8,4,6,6,3,8,4,6,6,1,3,4,1,6,7,0,8,0,3,3,1,8,2,2,4,5,7,3,7,7,4,3,7,3,0,7,3,0,9,7,6,0,3,0,3,1,5,1,4,5,2,7,6,2,4,2,9,5,5,9,8,4,2,3,6,1,9}, 160));
    }
}

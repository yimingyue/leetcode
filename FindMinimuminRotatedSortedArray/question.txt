Find Minimum in Rotated Sorted Array

Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

You may assume no duplicate exists in the array.

----------------------------------------
idea: use binary search to recursively find the pivot

if len(array) is 1
return array[0]

if len(array) is 2
return array[0] < array[1] ? array[0] : array[1]

if len(array) >= 3
mid = (start + end) / 2

then there are a few possibilities for the position of pivot
1. start = pivot < mid < end
2. start < pivot < mid < end
3. start < mid = pivot < end
4. start < mid < pivot < end
5. start < mid < end = pivot

and the value of start, mid and end accordingly:
1. startValue < midValue < endValue
2. startValue > midValue < endValue
3. startValue > midValue < endValue
4. startValue < midValue > endValue
5. startValue < midValue > endValue

then the next recursion:
1. if (startValue < midValue < endValue)    return array[0]
2. if (startValue > midValue < endValue)
    2.1 if starValue < endValue invalid Input
    2.2 else recursion on (start, mid]
3. if (startValue < midValue > endValue)
    3.1 if startValue < endValue    invalid Input
    3.2 else recursion on (mid, end]
4. if startValue > midValue > endValue  Invalid Input